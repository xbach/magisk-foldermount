#!/system/bin/sh
# Magisk FolderMount v0.8.6
# (c) 2017 Codebucket
# Easily mount internal SD card folders to external SD folders.
#
# Inspired by FolderMount created by madmack, unfortunately his app does not work with MagiskSU
#
# Internal SD card: /data/media/0/
# External SD card: /mnt/media_rw/XXXX-XXXX/
#
# Example: fmount -b "WhatsApp" ".foldermount/WhatsApp"
# Use a dot at the begin to hide the folder from media scan ;)

MODDIR="/magisk/magisk-foldermount" # lol, this should be probably avoided, but idk a better solution
BINDLIST="$MODDIR/foldermount.fstab"
LOG="$MODDIR/mount.log"

# Set up busybox applets for easier integration
alias busybox=/data/magisk/busybox
c=0
for i in $(busybox --list); do
    if [ "$c" -gt 5 ] || [ "$i" != 'echo' ]; then
        alias $i="/data/magisk/busybox $i"
    fi
done
unset c

# Check if /data has been mounted
DATAPATH="/data/media/0"
if ! mountpoint -q "/data"; then
    echo "E: Data partition has not been mounted or is unavailable, please try it again later or restart the device."
    exit 1
fi

# Search for external SD card in /mnt/runtime/default...
for var in `ls /mnt/runtime/default`; do
    if echo "$var" | grep -Eq '[0-9a-fA-F]{4}-[0-9a-fA-F]{4}'; then
        EXTSDPATH=/mnt/media_rw/$var
        break
    fi
done

# Exit if no external SD card found
if [ ! $EXTSDPATH ]; then
    echo "E: Could not find external SD card for use, please check if the SD card was installed correctly and restart the device."
    exit 2
fi

## METHOD FUNCTIONS
function bindFunc() {
    if [[ $# = 1 ]]; then
        cat << EOM
E: Invalid syntax, no source folder to bind defined.
Usage: fmount -b [source] (destination)
EOM
        exit 3
    fi

    src=${2}
    if [[ $# < 3 ]]; then
        dest=$EXTSDPATH/${2}
    else
        dest=$EXTSDPATH/${3}
    fi

    if ! mountpoint -q "/data/media/0/$src"
    then
        if ! mountpoint -q "/mnt/runtime/default/emulated/0/$src"
        then
            echo "Mounting $dest -> /data/media/0/$src..." >> $LOG
            mount -o bind "$dest" "/data/media/0/$src" 1>>$LOG 2>>$LOG # old style mounting
            # if ! mount -o bind "$dest" "/data/media/0/$src" 1>>$LOG 2>>$LOG
            # then
            #     echo "Failed. Mounting $dest -> /mnt/runtime/default/emulated/0/$src..." >> $LOG
            #     mount -o bind "$dest" "/mnt/runtime/default/emulated/0/$src" 1>>$LOG 2>>$LOG
            #     mount -o bind "$dest" "/mnt/runtime/read/emulated/0/$src" 1>>$LOG 2>>$LOG
            #     mount -o bind "$dest" "/mnt/runtime/write/emulated/0/$src" 1>>$LOG 2>>$LOG
            # fi
            echo "Done!" >> $LOG
            if [[ ! -f $BINDLIST ]];
            then
            	touch $BINDLIST
            fi
            echo "$dest	$src" >> $BINDLIST
        else
            echo "E: Folder already mounted."
            exit 5
        fi
    else
        echo "E: Folder already mounted."
        exit 5
    fi
}

function unbindFunc() {
    if [[ $# = 1 ]]; then
        cat << EOM
E: Invalid syntax, no folder to unbind defined.
Usage: fmount -u [source]
EOM
        exit 3
    fi

    src=${2}
    if mountpoint -q "/data/media/0/$src"
    then
        echo "Unmounting /data/media/0/$src..." >> $LOG
        if ! umount "/data/media/0/$src" 1>>$LOG 2>>$LOG
        then
            echo "E: Error while unmounting folder, please check the log file for details."
            exit 4
        fi
        echo "Done!" >> $LOG
    else
        if mountpoint -q "/mnt/runtime/default/emulated/0/$src"
        then
            echo "Unmounting /mnt/runtime/default/emulated/0/$src..." >> $LOG
            umount "/mnt/runtime/default/emulated/0/$src" 1>>$LOG 2>>$LOG
            umount "/mnt/runtime/read/emulated/0/$src" 1>>$LOG 2>>$LOG
            umount "/mnt/runtime/write/emulated/0/$src" 1>>$LOG 2>>$LOG
        else
            echo "E: Folder already unmounted."
            exit 5
        fi
        echo "Done!" >> $LOG
    fi
}

function debugFunc() {
    tail $LOG
    exit 0
}

#TODO: To be implemented in v0.9
#This function should list all folders from $BINDLIST and check whether these are mounted or not and print them out
function listFunc() {
	if [[ -f $BINDLIST ]]; then
		while IFS='' read -r line || [[ -n "$line" ]]; do
			src=`echo "$line" | awk '{print $2;}'`
			if mountpoint -q "/data/media/0/$src"
			then
				echo "$line	MOUNTED"
			else
				echo "$line	NOT MOUNTED"
			fi 
		done < "$BINDLIST"
		exit 0
	else
		echo "Bindlist does not exist"
		exit 4
	fi

}

#TODO: To be implemented in v0.9
#This function should remount all folders which are in $BINDLIST (some sort of list parsing needed)
function rebindFunc() {
	if [[ -f $BINDLIST ]]; then
		while IFS='' read -r line || [[ -n "$line" ]]; do
			$dest=`echo "$line" | awk '{print $1;}'`
			$src=`echo "$line" | awk '{print $2;}'`
			
			if ! mountpoint -q "/data/media/0/$src"
    		then
        		if ! mountpoint -q "/mnt/runtime/default/emulated/0/$src"
        		then
            		echo "Mounting $dest -> /data/media/0/$src..." >> $LOG
            		mount -o bind "$dest" "/data/media/0/$src" 1>>$LOG 2>>$LOG # old style mounting
            		# if ! mount -o bind "$dest" "/data/media/0/$src" 1>>$LOG 2>>$LOG
            		# then
                	# 	echo "Failed. Mounting $dest -> /mnt/runtime/default/emulated/0/$src..." >> $LOG
                	# 	mount -o bind "$dest" "/mnt/runtime/default/emulated/0/$src" 1>>$LOG 2>>$LOG
                	# 	mount -o bind "$dest" "/mnt/runtime/read/emulated/0/$src" 1>>$LOG 2>>$LOG
                	# 	mount -o bind "$dest" "/mnt/runtime/write/emulated/0/$src" 1>>$LOG 2>>$LOG
           			# fi
            		echo "Done!" >> $LOG
            	
        		else
            		echo "E: Folder already mounted."
            		exit 5
        		fi
    		else
        		echo "E: Folder already mounted."
        		exit 5
    		fi
		done < "$BINDLIST"
		exit 0
	else
		echo "Bindlist does not exist"
		exit 4
	fi


    exit 0
}

function helpFunc() {
	cat << EOM
Magisk FolderMount v0.8.9-b2

Internal SD card: $DATAPATH
External SD card: $EXTSDPATH

Usage: fmount [-budlr] [source] (destination)
EOM
    exit 0
}
## END METHOD FUNCTIONS

# Show help if no arguments passed
if [[ $# = 0 ]]; then
  helpFunc
fi

# Handle redirecting to specific functions based on arguments
case "${1}" in
    "-b" | "bind"       ) bindFunc "$@";;
    "-u" | "unbind"     ) unbindFunc "$@";;
    "-d" | "debug"      ) debugFunc;;
    "-l" | "list"       ) listFunc;;
    "-r" | "rebind"     ) rebindFunc "$@";;
    *                   ) helpFunc;;
esac

# Exit codes:
# 0 = Success, no errors
# 1 = Data partition has not been mounted or is unavailable
# 2 = No external SD card
# 3 = Invalid syntax
# 4 = Error while mounting folder
# 5 = Folder already mounted/unmounted
